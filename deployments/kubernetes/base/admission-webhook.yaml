apiVersion: v1
kind: Namespace
metadata:
  name: kube-policies-system
  labels:
    name: kube-policies-system
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-policies-admission-webhook
  namespace: kube-policies-system
  labels:
    app: kube-policies-admission-webhook
    component: admission-webhook
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: kube-policies-admission-webhook
  template:
    metadata:
      labels:
        app: kube-policies-admission-webhook
        component: admission-webhook
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: kube-policies-admission-webhook
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: kube-policies-admission-webhook
              topologyKey: kubernetes.io/hostname
      containers:
      - name: admission-webhook
        image: ghcr.io/enterprise/admission-webhook:latest
        imagePullPolicy: Always
        ports:
        - name: webhook
          containerPort: 8443
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        args:
        - --cert-path=/etc/certs/tls.crt
        - --key-path=/etc/certs/tls.key
        - --port=8443
        - --metrics-port=9090
        - --config=/etc/config/config.yaml
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: webhook
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: webhook
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: certs
          mountPath: /etc/certs
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: certs
        secret:
          secretName: kube-policies-webhook-certs
          defaultMode: 0400
      - name: config
        configMap:
          name: kube-policies-config
      - name: tmp
        emptyDir: {}
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: kube-policies-admission-webhook
  namespace: kube-policies-system
  labels:
    app: kube-policies-admission-webhook
    component: admission-webhook
spec:
  type: ClusterIP
  ports:
  - name: webhook
    port: 443
    targetPort: webhook
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: kube-policies-admission-webhook
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-policies-config
  namespace: kube-policies-system
  labels:
    app: kube-policies
    component: config
data:
  config.yaml: |
    server:
      port: 8443
      metrics_port: 9090
      log_level: info
      tls_cert_path: /etc/certs/tls.crt
      tls_key_path: /etc/certs/tls.key
    
    policy:
      bundle_url: "http://kube-policies-policy-manager:8080/api/v1/bundles/default"
      refresh_interval: "30s"
      cache_size: 1000
      timeout: "5s"
      failure_mode: "fail-closed"
      default_policies:
        - "security-baseline"
        - "compliance-cis"
      frameworks:
        cis: "CIS Kubernetes Benchmark v1.8.0"
        nist: "NIST Cybersecurity Framework 2.0"
        pci: "PCI DSS v4.0"
    
    audit:
      enabled: true
      backend: "file"
      config:
        filename: "/var/log/kube-policies/audit.log"
      buffer_size: 1000
      flush_interval: "10s"
      retention: "90d"
    
    metrics:
      enabled: true
      namespace: "kube_policies"
      subsystem: "admission"
    
    security:
      tls:
        min_version: "1.3"
        cipher_suites:
          - "TLS_AES_256_GCM_SHA384"
          - "TLS_CHACHA20_POLY1305_SHA256"
          - "TLS_AES_128_GCM_SHA256"
        client_auth: "require"
      rbac:
        enabled: true
        provider: "kubernetes"
        default_role: "viewer"
      encryption:
        at_rest:
          enabled: true
          algorithm: "AES-256-GCM"
          key_source: "kubernetes-secret"
        in_transit:
          enabled: true
          mode: "strict"
    
    storage:
      type: "memory"
      config: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: kube-policies-validator
  labels:
    app: kube-policies
    component: admission-webhook
spec:
  clientConfig:
    service:
      name: kube-policies-admission-webhook
      namespace: kube-policies-system
      path: /validate
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods", "services", "configmaps", "secrets"]
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["apps"]
    apiVersions: ["v1"]
    resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["networking.k8s.io"]
    apiVersions: ["v1"]
    resources: ["networkpolicies", "ingresses"]
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["rbac.authorization.k8s.io"]
    apiVersions: ["v1"]
    resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
  namespaceSelector:
    matchExpressions:
    - key: name
      operator: NotIn
      values: ["kube-system", "kube-public", "kube-node-lease", "kube-policies-system"]
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail
  timeoutSeconds: 10
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingAdmissionWebhook
metadata:
  name: kube-policies-mutator
  labels:
    app: kube-policies
    component: admission-webhook
spec:
  clientConfig:
    service:
      name: kube-policies-admission-webhook
      namespace: kube-policies-system
      path: /mutate
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["apps"]
    apiVersions: ["v1"]
    resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  namespaceSelector:
    matchExpressions:
    - key: name
      operator: NotIn
      values: ["kube-system", "kube-public", "kube-node-lease", "kube-policies-system"]
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail
  timeoutSeconds: 10

